// This file handle UI stuff

// Feel free to modify these
// Controls the position of the game on screen
svar_set tetris_pos_x 50
svar_set tetris_pos_y 50

// DO NOT MODIFY UNDER THIS COMMENT UNLESS
// YOU KNOW WHAT YOU ARE DOING !!

// Definition of the display variables
// Width and height of the "window" (bottom right origin)
svar_set disp_w 11
svar_set disp_h 24
svar_set hud_text_offset 1000
svar_set tetris_font_index 72

// Location of the matrix within the window
svar_set disp_matrix_x 0
svar_set disp_matrix_y 1

// Textures
svar_set texture_bg "#aaaaaag#FFFFFF"
svar_set texture_mino "g"
svar_set texture_empty "#555555h#FFFFFF"
svar_set default_disp_line "#aaaaaag#FFFFFF"

// Empties the display buffer at $1,$2
sar_function clear_disp_cell svar_set disp_buf_$1_$2 $texture_bg
// Sets the display buffer at $1,$2 to $3
sar_function set_disp_cell "svar_set disp_buf_$1_$2 $3"

// Initialises the display buffer with spaces
// Each cell in the display buffer is 2 spaces to make it sorta square
sar_function init_disp_row "svar_set init_disp_row_idx 0; init_disp_row_loop $1"
sar_function init_disp_row_loop cond "!var:init_disp_row_idx=$disp_w" "clear_disp_cell $init_disp_row_idx $1; svar_add init_disp_row_idx 1; init_disp_row_loop $1"

sar_function init_disp "svar_set init_disp_idx 0; init_disp_loop"
sar_function init_disp_loop cond "!var:init_disp_idx=$disp_h" "init_disp_row $init_disp_idx; svar_add init_disp_idx 1; init_disp_loop $1"

// Refreshes the display
sar_function refresh_disp_row "svar_set refresh_disp_row_idx 0; refresh_disp_row_loop $1"
sar_function refresh_disp_row_loop cond "!var:refresh_disp_row_idx=$disp_w" "refresh_disp_row_loop_h $refresh_disp_row_idx $1; svar_add refresh_disp_row_idx 1; refresh_disp_row_loop $1"
sar_function refresh_disp_row_loop_h svar_append current_disp_line disp_buf_$1_$2

sar_function refresh_disp "svar_set refresh_disp_idx 0; refresh_disp_loop"
sar_function refresh_disp_loop cond "!var:refresh_disp_idx=$disp_h" "svar_set current_disp_line $default_disp_line; refresh_disp_row $refresh_disp_idx; refresh_disp_loop_h1; refresh_disp_loop_h2; svar_add refresh_disp_idx 1; refresh_disp_loop $1"
sar_function refresh_disp_loop_h1 "svar_set current_hud_idx $hud_text_offset; svar_add current_hud_idx $refresh_disp_idx"
sar_function refresh_disp_loop_h2 sar_hud_set_text $current_hud_idx "$current_disp_line"

// Hides the tetris display
sar_function hide_disp "svar_set hide_disp_idx 0; hide_disp_loop $1"
sar_function hide_disp_loop cond "!var:hide_disp_idx=$disp_h" "hide_disp_loop_h1; hide_disp_loop_h2; svar_add hide_disp_idx 1; hide_disp_loop $1"
sar_function hide_disp_loop_h1 "svar_set current_hud_idx $hud_text_offset; svar_add current_hud_idx $hide_disp_idx"
sar_function hide_disp_loop_h2 "sar_hud_hide_text $current_hud_idx"

// Convert x and y matrix coords to x and y display coords
// Arguments:
// - $1, $2: The x and y coordinates on the matrix
// Return variable: convert_matrix_coords_ret_x, convert_matrix_coords_ret_y
sar_function convert_matrix_coords "convert_matrix_coords_x $1; convert_matrix_coords_y $2"
sar_function convert_matrix_coords_x "svar_set convert_matrix_coords_ret_x $1; svar_add convert_matrix_coords_ret_x disp_matrix_x"
sar_function convert_matrix_coords_y "svar_set convert_matrix_coords_ret_y $1; svar_mul convert_matrix_coords_ret_y -1; svar_add convert_matrix_coords_ret_y 21; svar_add convert_matrix_coords_ret_y disp_matrix_y"

// Updates the display buffer with the matrix data
sar_function update_disp_matrix_row "svar_set update_disp_matrix_row_idx 0; update_disp_matrix_row_loop $1"
sar_function update_disp_matrix_row_loop cond "!var:update_disp_matrix_row_idx=10" "get_cell $update_disp_matrix_row_idx $1; convert_matrix_coords $update_disp_matrix_row_idx $1; update_disp_matrix_row_loop_h1; update_disp_matrix_row_loop_h2; update_disp_matrix_row_loop_h3; svar_add update_disp_matrix_row_idx 1; update_disp_matrix_row_loop $1"
sar_function update_disp_matrix_row_loop_h1 "piece_to_color $get_cell_ret"
sar_function update_disp_matrix_row_loop_h2 "set_disp_cell $convert_matrix_coords_ret_x $convert_matrix_coords_ret_y $piece_to_color_ret$texture_mino#FFFFFF"
sar_function update_disp_matrix_row_loop_h3 cond "var:get_cell_ret=E" "set_disp_cell $convert_matrix_coords_ret_x $convert_matrix_coords_ret_y $texture_empty"

sar_function update_disp_matrix "svar_set update_disp_matrix_idx 0; update_disp_matrix_loop"
sar_function update_disp_matrix_loop cond "!var:update_disp_matrix_idx=22" "update_disp_matrix_row $update_disp_matrix_idx; svar_add update_disp_matrix_idx 1; update_disp_matrix_loop $1"

// Updates the display buffer with active piece data
sar_function update_disp_active_piece "piece_to_color $active_piece_shape; get_occupied_cells; svar_set mino_idx 0; update_disp_active_piece_loop"
sar_function update_disp_active_piece_loop cond "!var:mino_idx=4" "update_disp_active_piece_loop_h$mino_idx; svar_add mino_idx 1; update_disp_active_piece_loop"
sar_function update_disp_active_piece_loop_h0   "convert_matrix_coords $get_occupied_cells_ret_0_x $get_occupied_cells_ret_0_y; update_disp_active_piece_loop_h0_1"
sar_function update_disp_active_piece_loop_h0_1 "set_disp_cell $convert_matrix_coords_ret_x $convert_matrix_coords_ret_y $piece_to_color_ret$texture_mino#FFFFFF"
sar_function update_disp_active_piece_loop_h1   "convert_matrix_coords $get_occupied_cells_ret_1_x $get_occupied_cells_ret_1_y; update_disp_active_piece_loop_h1_1"
sar_function update_disp_active_piece_loop_h1_1 "set_disp_cell $convert_matrix_coords_ret_x $convert_matrix_coords_ret_y $piece_to_color_ret$texture_mino#FFFFFF"
sar_function update_disp_active_piece_loop_h2   "convert_matrix_coords $get_occupied_cells_ret_2_x $get_occupied_cells_ret_2_y; update_disp_active_piece_loop_h2_1"
sar_function update_disp_active_piece_loop_h2_1 "set_disp_cell $convert_matrix_coords_ret_x $convert_matrix_coords_ret_y $piece_to_color_ret$texture_mino#FFFFFF"
sar_function update_disp_active_piece_loop_h3   "convert_matrix_coords $get_occupied_cells_ret_3_x $get_occupied_cells_ret_3_y; update_disp_active_piece_loop_h3_1"
sar_function update_disp_active_piece_loop_h3_1 "set_disp_cell $convert_matrix_coords_ret_x $convert_matrix_coords_ret_y $piece_to_color_ret$texture_mino#FFFFFF"

// The ACTUAL display function
sar_function update_disp cond "var:tetris_active=1" "update_disp_matrix; update_disp_active_piece; refresh_disp"
sar_function update_disp_piece "init_disp; update_disp_active_piece; refresh_disp"

// Cool background, credit mlugg
// Setting up toasts
sar_function set_toast_coords "sar_toast_x $tetris_pos_x; sar_toast_y $tetris_pos_y"
set_toast_coords

sar_function tmp sar_toast_font $tetris_font_index; tmp
sar_toast_compact 1
sar_toast_width 1000
sar_toast_anchor 1

sar_toast_tag_dismiss_all tetris
sar_toast_tag_set_duration tetris forever
sar_toast_tag_set_color tetris 55 55 55

svar_set i 24
sar_alias mk_tetris_bg "svar_sub i 1; mk_tetris_bg_h2; mk_tetris_bg_h1"
sar_alias mk_tetris_bg_h1 cond "!var:i=0" mk_tetris_bg
sar_alias mk_tetris_bg_h2 sar_toast_create tetris "hhhhhhhhhhhh"

// Setting up the hud
sar_function set_hud_padding "set_hud_padding_h1; set_hud_padding_h2; set_hud_padding_h3; set_hud_padding_h4"
sar_function set_hud_padding_h1 "svar_set tmp_hud_padding_x $tetris_pos_x; svar_add tmp_hud_padding_x 3"
sar_function set_hud_padding_h2 "svar_set tmp_hud_padding_y $tetris_pos_y; svar_add tmp_hud_padding_y 2"
sar_function set_hud_padding_h3 "sar_hud_default_padding_x $tmp_hud_padding_x"
sar_function set_hud_padding_h4 "sar_hud_default_padding_y $tmp_hud_padding_y"
set_hud_padding

sar_function tmp sar_hud_default_font_index $tetris_font_index; tmp
sar_hud_default_spacing 4
sar_hud_acceleration 0
sar_hud_angles 0
sar_hud_avg 0
sar_hud_cps 0
sar_hud_demo 0
sar_hud_frame 0
sar_hud_ghost_show_name 0
sar_hud_groundframes 0
sar_hud_jump 0
sar_hud_jump_peak 0
sar_hud_jumps 0
sar_hud_pause_timer 0
sar_hud_player_info 0
sar_hud_position 0
sar_hud_precision 0
sar_hud_session 0
sar_hud_velocity 0
sar_hud_velocity_angle 0
sar_hud_velocity_peak 0

// Displaying stuff !
init_disp
mk_tetris_bg
