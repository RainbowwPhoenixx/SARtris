// This file handle UI stuff

// Definition of the display variables
svar_set hud_text_offset 1000

// Textures
svar_set texture_bg "#aaaaaag"
svar_set texture_mino "g#555555"
svar_set texture_empty "h"
svar_set texture_solid_line "#aaaaaagggggggggggg"
svar_set texture_solid_hold_line "#aaaaaagggggg"
svar_set default_disp_line "#aaaaaag#555555"

// Equivalent to the above textures, but slower. Leaving this here for clarity
// svar_set texture_bg "#aaaaaag"
// svar_set texture_mino "g"
// svar_set texture_empty "#555555h"
// svar_set default_disp_line "#aaaaaag"

// Hides the tetris display
sar_function hide_disp "svar_set hide_disp_idx -3; hide_disp_loop $1"
sar_function hide_disp_loop cond "!var:hide_disp_idx=24" "hide_disp_loop_h1; hide_disp_loop_h2; svar_add hide_disp_idx 1; hide_disp_loop $1"
sar_function hide_disp_loop_h1 "svar_set current_hud_idx $hud_text_offset; svar_add current_hud_idx $hide_disp_idx"
sar_function hide_disp_loop_h2 "sar_hud_hide_text $current_hud_idx"

// Updates the display
sar_function refresh_disp "get_occupied_cells; sar_hud_set_text 1000 $texture_solid_line; sar_hud_set_text 1023 $texture_solid_line; svar_set refresh_disp_idx 21; refresh_disp_loop"
sar_function refresh_disp_loop cond "!var:refresh_disp_idx=-1" "svar_set current_disp_line $default_disp_line; refresh_disp_row $refresh_disp_idx; refresh_disp_loop_h1; refresh_disp_loop_h2; refresh_disp_loop_h3; svar_sub refresh_disp_idx 1; seq nop refresh_disp_loop"
sar_function refresh_disp_loop_h1 "svar_set current_hud_idx $refresh_disp_idx; svar_mul current_hud_idx -1; svar_add current_hud_idx 22; svar_add current_hud_idx $hud_text_offset"
sar_function refresh_disp_loop_h2 "svar_append current_disp_line default_disp_line"
sar_function refresh_disp_loop_h3 sar_hud_set_text $current_hud_idx "$current_disp_line"

sar_function refresh_disp_row "svar_set refresh_disp_row_idx 0; refresh_disp_row_loop $1"
sar_function refresh_disp_row_loop cond "!var:refresh_disp_row_idx=10" "get_cell $refresh_disp_row_idx $1; refresh_disp_row_loop_h1 $1; refresh_disp_row_loop_h2; refresh_disp_row_loop_h3; svar_add refresh_disp_row_idx 1; refresh_disp_row_loop $1"
sar_function refresh_disp_row_loop_h1 cond "var:get_cell_ret=E" "is_filled_by_active_piece $1; piece_to_color $active_piece_shape; refresh_disp_row_loop_h1_active; refresh_disp_row_loop_h1_empty"
sar_function refresh_disp_row_loop_h1_active cond "var:is_filled_by_active_piece_ret=0" "svar_append current_disp_line texture_empty"
sar_function refresh_disp_row_loop_h1_empty cond "var:is_filled_by_active_piece_ret=1" "svar_set refresh_disp_row_loop_h1_tmp $piece_to_color_ret$texture_mino; svar_append current_disp_line refresh_disp_row_loop_h1_tmp"
sar_function refresh_disp_row_loop_h2 "piece_to_color $get_cell_ret"
sar_function refresh_disp_row_loop_h3 cond "!var:get_cell_ret=E" "svar_set refresh_disp_row_loop_h2_tmp $piece_to_color_ret$texture_mino; svar_append current_disp_line refresh_disp_row_loop_h2_tmp"

// Checks if the cell at ($refresh_disp_row_idx, $1) is occupied by the active piece
// /!\ Highly specialized function not meant to be used anywhere but refresh_disp
// Return variable: is_filled_by_active_piece_ret
sar_function is_filled_by_active_piece "svar_set is_filled_by_active_piece_ret 0; is_filled_by_active_piece_h $1"
sar_function is_filled_by_active_piece_h cond "(var:get_occupied_cells_ret_0_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_0_y=$1) | (var:get_occupied_cells_ret_1_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_1_y=$1) | (var:get_occupied_cells_ret_2_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_2_y=$1) | (var:get_occupied_cells_ret_3_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_3_y=$1)" "svar_set is_filled_by_active_piece_ret 1"

// The above cond is:
// (var:get_occupied_cells_ret_0_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_0_y=$1) |
// (var:get_occupied_cells_ret_1_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_1_y=$1) |
// (var:get_occupied_cells_ret_2_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_2_y=$1) |
// (var:get_occupied_cells_ret_3_x=$refresh_disp_row_idx & var:get_occupied_cells_ret_3_y=$1)

// Updates the held piece 
sar_function refresh_disp_hold "piece_to_color $held_piece; sar_hud_set_text 997 $texture_solid_hold_line; refresh_disp_hold_l1; refresh_disp_hold_l2"
sar_function refresh_disp_hold_l1 "svar_set current_disp_line $default_disp_line; svar_set refresh_disp_hold_row_idx 0; refresh_disp_hold_row_loop 24; svar_append current_disp_line default_disp_line; refresh_disp_hold_l_h 998"
sar_function refresh_disp_hold_l2 "svar_set current_disp_line $default_disp_line; svar_set refresh_disp_hold_row_idx 0; refresh_disp_hold_row_loop 23; svar_append current_disp_line default_disp_line; refresh_disp_hold_l_h 999"
sar_function refresh_disp_hold_l_h sar_hud_set_text $1 "$current_disp_line"

sar_function refresh_disp_hold_row_loop cond "!var:refresh_disp_hold_row_idx=4" "is_filled_by_held_piece $1; refresh_disp_hold_row_loop_h1_active; refresh_disp_hold_row_loop_h1_empty; svar_add refresh_disp_hold_row_idx 1; refresh_disp_hold_row_loop $1"
sar_function refresh_disp_hold_row_loop_h1_active cond "var:held_piece=E | var:is_filled_by_held_piece_ret=0" "svar_append current_disp_line texture_empty"
sar_function refresh_disp_hold_row_loop_h1_empty cond "!var:held_piece=E & var:is_filled_by_held_piece_ret=1" "svar_set refresh_disp_hold_row_loop_h2_tmp $piece_to_color_ret$texture_mino; svar_append current_disp_line refresh_disp_hold_row_loop_h2_tmp"

// Checks if the cell at ($refresh_disp_hold_row_idx, $1) is occupied by the held piece
// /!\ Highly specialized function not meant to be used anywhere but refresh_disp_hold
// Return variable: is_filled_by_held_piece_ret
sar_function is_filled_by_held_piece "svar_set is_filled_by_held_piece_ret 0; is_filled_by_held_piece_h $1"
sar_function is_filled_by_held_piece_h cond "(var:get_hold_cells_ret_0_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_0_y=$1) | (var:get_hold_cells_ret_1_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_1_y=$1) | (var:get_hold_cells_ret_2_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_2_y=$1) | (var:get_hold_cells_ret_3_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_3_y=$1)" "svar_set is_filled_by_held_piece_ret 1"

// The above cond is:
// (var:get_hold_cells_ret_0_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_0_y=$1) |
// (var:get_hold_cells_ret_1_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_1_y=$1) |
// (var:get_hold_cells_ret_2_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_2_y=$1) |
// (var:get_hold_cells_ret_3_x=$refresh_disp_hold_row_idx & var:get_hold_cells_ret_3_y=$1)

// The ACTUAL display function
sar_function update_disp cond "var:tetris_active=1" "refresh_disp"
sar_function update_hold_and_disp cond "var:tetris_active=1" "refresh_disp; refresh_disp_hold"

// Cool background, credit mlugg
// Setting up toasts
sar_function set_toast_coords "sar_toast_x $tetris_pos_x; sar_toast_y $tetris_pos_y"
set_toast_coords

sar_function tmp sar_toast_font $tetris_font_index; tmp
sar_toast_compact 1
sar_toast_width 1000
sar_toast_anchor 1

sar_toast_tag_dismiss_all tetris
sar_toast_tag_set_duration tetris forever
sar_toast_tag_set_color tetris 555555

svar_set i 24
sar_alias mk_tetris_bg "svar_sub i 1; mk_tetris_bg_h2; mk_tetris_bg_h1"
sar_alias mk_tetris_bg_h1 cond "!var:i=0" mk_tetris_bg
sar_alias mk_tetris_bg_h2 sar_toast_create tetris "hhhhhhhhhhhh"

// Setting up the hud
sar_function set_hud_padding "set_hud_padding_h1; set_hud_padding_h2; set_hud_padding_h3; set_hud_padding_h4"
sar_function set_hud_padding_h1 "svar_set tmp_hud_padding_x $tetris_pos_x; svar_add tmp_hud_padding_x 3"
sar_function set_hud_padding_h2 "svar_set tmp_hud_padding_y $tetris_pos_y; svar_add tmp_hud_padding_y 2"
sar_function set_hud_padding_h3 "sar_hud_default_padding_x $tmp_hud_padding_x"
sar_function set_hud_padding_h4 "sar_hud_default_padding_y $tmp_hud_padding_y"
set_hud_padding

sar_function tmp sar_hud_default_font_index $tetris_font_index; tmp
cond "var:tetris_background=0" sar_hud_default_spacing 0
cond "var:tetris_background=1" sar_hud_default_spacing 4
sar_hud_acceleration 0
sar_hud_angles 0
sar_hud_avg 0
sar_hud_cps 0
sar_hud_demo 0
sar_hud_frame 0
sar_hud_ghost_show_name 0
sar_hud_groundframes 0
sar_hud_jump 0
sar_hud_jump_peak 0
sar_hud_jumps 0
sar_hud_pause_timer 0
sar_hud_player_info 0
sar_hud_position 0
sar_hud_precision 0
sar_hud_session 0
sar_hud_velocity 0
sar_hud_velocity_angle 0
sar_hud_velocity_peak 0

// Displaying stuff !
cond "var:tetris_background=1" mk_tetris_bg
