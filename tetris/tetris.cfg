// This file defines the main game logic

// Pieces are defined as a 1 char string
// Values are I, O, T, L, J, S, Z, and maybe E if I decide to do colored output

// Rotation is represented as an int in [0; 3]

// Capture all the user hud/toast/other settings, to restore them later
cond "!var:tetris_active=1" "exec tetris/capture"

// Get the user-defined settings
exec tetris/settings

// Define piece minos
// They are of the form mino_<piece>_<idx>_<x|y>
exec tetris/piece_definitions

// Define RNG functions
exec tetris/rng

// Define display functions
exec tetris/display

// Exec the controls
exec tetris/controls

// ------------------------------------------------------------------------------------------
//                                      ACTIVE PIECE
// ------------------------------------------------------------------------------------------

// Initialisation of the piece variables
sar_function init_piece "rand_piece; init_piece_h"
sar_function init_piece_h "spawn_piece $rand_piece_ret"

// Makes the $1 the new active piece
sar_function spawn_piece "svar_set active_piece_shape $1; svar_set active_piece_x 4; svar_set active_piece_y 20; svar_set active_piece_r 0"

// Naive piece movers
sar_function apply_right "svar_add active_piece_x 1"
sar_function apply_left "svar_sub active_piece_x 1"
sar_function apply_up "svar_add active_piece_y 1"
sar_function apply_down "svar_sub active_piece_y 1"
sar_function apply_cw "svar_add active_piece_r 1; svar_mod active_piece_r 4"
sar_function apply_ccw "svar_add active_piece_r 3; svar_mod active_piece_r 4"

// ------------------------------------------------------------------------------------------
//                                            HOLD
// ------------------------------------------------------------------------------------------

sar_function init_hold "svar_set held_piece E; svar_set has_held 0"

sar_function apply_hold "apply_hold_h1; apply_hold_h2; svar_set has_held 1; get_hold_cells"
sar_function apply_hold_h1 cond "!var:held_piece=E" "spawn_piece $held_piece; svar_set held_piece $active_piece_shape"
sar_function apply_hold_h2 cond "var:held_piece=E" "svar_set held_piece $active_piece_shape; init_piece"

// Get the cells occupied by hold. Let's call them "virtual" cells, because they're not really part of the matrix
// Called every time the hold button is pressed to be able to display it. If hold is E (aka empty) this data sould not be used.
// Return variables: get_hold_cells_ret_<mino_index>_<x|y>
sar_function get_hold_cells "svar_set mino_idx 0; get_hold_cells_loop"
sar_function get_hold_cells_loop cond "!var:mino_idx=4" "get_hold_cells_loop_compute_x $mino_idx; get_hold_cells_loop_compute_y $mino_idx; svar_add mino_idx 1; get_hold_cells_loop"
sar_function get_hold_cells_loop_compute_x "get_mino_coord $held_piece 0 $1 x; get_hold_cells_loop_compute_x_h $1; svar_add get_hold_cells_ret_$1_x 1"
sar_function get_hold_cells_loop_compute_x_h "svar_set get_hold_cells_ret_$1_x $get_mino_coord_ret"
sar_function get_hold_cells_loop_compute_y "get_mino_coord $held_piece 0 $1 y; get_hold_cells_loop_compute_y_h $1; svar_add get_hold_cells_ret_$1_y 23"
sar_function get_hold_cells_loop_compute_y_h "svar_set get_hold_cells_ret_$1_y $get_mino_coord_ret"

// ------------------------------------------------------------------------------------------
//                                      MATRIX OPERATIONS
// ------------------------------------------------------------------------------------------

// Sets cell ($1, $2) to $3
// Arguments:
// - $1, $2: x and y coordinates of the cell
// - $3: cell state, string with the piece (for coloring purposes)
sar_function set_cell "svar_set matrix_$1_$2 $3"

// Gets value of cell ($1, $2) returns F if out of the field
// Arguments:
// - $1, $2: x and y coordinates of the cell
// Return variable: get_cell_ret
sar_function get_cell "get_cell_h; svar_append get_cell_ret matrix_$1_$2"
sar_function get_cell_h svar_set get_cell_ret ""

// Sets row $1 as empty
// Arguments:
// - $1: y coordinate of the row
sar_function init_row "svar_set init_row_idx 0; init_row_loop $1"
sar_function init_row_loop cond "!var:init_row_idx=10" "set_cell $init_row_idx $1 E; svar_add init_row_idx 1; init_row_loop $1"

// Initializes the matrix (matrix_x_y)
// Matrix is a 2d array of piece shape (for coloring. E indicates an empty cell)
sar_function init_matrix "svar_set init_matrix_idx 0; init_matrix_loop"
sar_function init_matrix_loop cond "!var:init_matrix_idx=25" "init_row $init_matrix_idx; svar_add init_matrix_idx 1; init_matrix_loop $1"

// Returns mino_$1_$2_$3_$4
// Arguments:
// - $1: piece shape
// - $2: rotation
// - $3: mino index
// - $4: x or y
// Return variable: get_mino_coord_ret
sar_function get_mino_coord "get_mino_coord_h; svar_append get_mino_coord_ret mino_$1_$2_$3_$4"
sar_function get_mino_coord_h svar_set get_mino_coord_ret ""

// ------------------------------------------------------------------------------------------
//                                PIECE/MATRIX INTERACTIONS
// ------------------------------------------------------------------------------------------

// Returns an array of the cells occupied by the active piece
// Return get_occupied_cells_ret_<mino_index>_<x|y>
sar_function get_occupied_cells "svar_set mino_idx 0; get_occupied_cells_loop"
sar_function get_occupied_cells_loop cond "!var:mino_idx=4" "get_occupied_cells_loop_compute_x $mino_idx; get_occupied_cells_loop_compute_y $mino_idx; svar_add mino_idx 1; get_occupied_cells_loop"
sar_function get_occupied_cells_loop_compute_x "get_mino_coord $active_piece_shape $active_piece_r $1 x; get_occupied_cells_loop_compute_x_h $1; svar_add get_occupied_cells_ret_$1_x active_piece_x"
sar_function get_occupied_cells_loop_compute_x_h "svar_set get_occupied_cells_ret_$1_x $get_mino_coord_ret"
sar_function get_occupied_cells_loop_compute_y "get_mino_coord $active_piece_shape $active_piece_r $1 y; get_occupied_cells_loop_compute_y_h $1; svar_add get_occupied_cells_ret_$1_y active_piece_y"
sar_function get_occupied_cells_loop_compute_y_h "svar_set get_occupied_cells_ret_$1_y $get_mino_coord_ret"

// Locks the piece to the matrix
sar_function lock_active_piece "get_occupied_cells; lock_active_piece_h; svar_set has_held 0"
sar_function lock_active_piece_h "set_cell $get_occupied_cells_ret_0_x $get_occupied_cells_ret_0_y $active_piece_shape; set_cell $get_occupied_cells_ret_1_x $get_occupied_cells_ret_1_y $active_piece_shape; set_cell $get_occupied_cells_ret_2_x $get_occupied_cells_ret_2_y $active_piece_shape; set_cell $get_occupied_cells_ret_3_x $get_occupied_cells_ret_3_y $active_piece_shape"

// Checks if the current state is valid
// Return variable: is_state_valid_ret (1 if valid, 0 if not)
sar_function is_state_valid "svar_set is_state_valid_ret 1; get_occupied_cells; svar_set state_check_idx 0; is_state_valid_loop"
sar_function is_state_valid_loop cond "!var:state_check_idx=4 & var:is_state_valid_ret=1" "reset_check_x; reset_check_y; is_state_valid_loop_h1 $state_check_idx; is_state_valid_loop_h2; is_state_valid_loop_h3; svar_add state_check_idx 1; is_state_valid_loop"
sar_function reset_check_x svar_set to_check_x ""
sar_function reset_check_y svar_set to_check_y ""
sar_function is_state_valid_loop_h1 "svar_append to_check_x get_occupied_cells_ret_$1_x; svar_append to_check_y get_occupied_cells_ret_$1_y"
sar_function is_state_valid_loop_h2 "get_cell $to_check_x $to_check_y"
sar_function is_state_valid_loop_h3 cond "!var:get_cell_ret=E" "svar_set is_state_valid_ret 0"

// ------------------------------------------------------------------------------------------
//                                     LINE CLEARING
// ------------------------------------------------------------------------------------------

// Checks if the $1 line is full
// Return_value: line_full_ret
sar_function line_full "svar_set line_full_ret 1; svar_set line_full_idx 0; line_full_loop $1"
sar_function line_full_loop cond "!var:line_full_idx=10 & var:line_full_ret=1" "get_cell $line_full_idx $1; line_full_loop_h; svar_add line_full_idx 1; line_full_loop $1"
sar_function line_full_loop_h cond "var:get_cell_ret=E" "svar_set line_full_ret 0"

// Checks if the $1 line is empty
// Return_value: line_empty_ret
sar_function line_empty "svar_set line_empty_ret 1; svar_set line_empty_idx 0; line_empty_loop $1"
sar_function line_empty_loop cond "!var:line_empty_idx=10 & var:line_empty_ret=1" "get_cell $line_empty_idx $1; line_empty_loop_h; svar_add line_empty_idx 1; line_empty_loop $1"
sar_function line_empty_loop_h cond "!var:get_cell_ret=E" "svar_set line_empty_ret 0"

// Pulls down rows from $1 and up
sar_function pull_down "svar_set line_empty_ret 0; svar_set pull_down_idx $1; pull_down_loop $1"
sar_function pull_down_loop cond "!var:pull_down_idx=24 & var:line_empty_ret=0" "line_empty $pull_down_idx; pull_down_row; svar_add pull_down_idx 1; pull_down_loop"
sar_function pull_down_row "svar_set pull_down_row_idx 0; pull_down_row_loop"
sar_function pull_down_row_loop cond "!var:pull_down_row_idx=10" "pull_down_row_loop_h1; pull_down_row_loop_h2; pull_down_row_loop_h3; svar_add pull_down_row_idx 1; pull_down_row_loop"
sar_function pull_down_row_loop_h1 "svar_set y_plus_one $pull_down_idx; svar_add y_plus_one 1"
sar_function pull_down_row_loop_h2 "get_cell $pull_down_row_idx $y_plus_one"
sar_function pull_down_row_loop_h3 "set_cell $pull_down_row_idx $pull_down_idx $get_cell_ret"

// Clears lines (a bit inefficiently !)
sar_function clear_lines "svar_set line_empty_ret 0; svar_set clear_lines_ret 1; get_occupied_cells; svar_set clear_lines_idx 0; clear_lines_loop"
sar_function clear_lines_loop cond "!var:clear_lines_idx=24 & var:line_empty_ret=0" "line_full $clear_lines_idx; clear_lines_loop_h; line_empty $clear_lines_idx; svar_add clear_lines_idx 1; clear_lines_loop"
sar_function clear_lines_loop_h cond "var:line_full_ret=1" "pull_down $clear_lines_idx; svar_sub clear_lines_idx 1"

// ------------------------------------------------------------------------------------------
//                                      INPUT HANDLING
// ------------------------------------------------------------------------------------------

// Returns kick_[$active_piece_shape]_$1_$2_$3
// Arguments:
// - $1: rotation
// - $2: kick index
// - $3: x or y
// Return variable: get_kick_coord_ret
sar_function get_kick_coord "get_kick_coord_h1; get_kick_coord_h2 $1 $2 $3; get_kick_coord_h3 $1 $2 $3"
sar_function get_kick_coord_h1 svar_set get_kick_coord_ret ""
sar_function get_kick_coord_h2 cond "var:active_piece_shape=I" "svar_append get_kick_coord_ret kick_I_$1_$2_$3"
sar_function get_kick_coord_h3 cond "!var:active_piece_shape=I" "svar_append get_kick_coord_ret kick_other_$1_$2_$3"

// Player input handlers
sar_function perform_right cond "var:tetris_active=1" "apply_right; is_state_valid; perform_right_h; update_disp"
sar_function perform_right_h cond "var:is_state_valid_ret=0" "apply_left"

sar_function perform_left cond "var:tetris_active=1" "apply_left; is_state_valid; perform_left_h; update_disp"
sar_function perform_left_h cond "var:is_state_valid_ret=0" "apply_right"

sar_function perform_soft_drop cond "var:tetris_active=1" "apply_down; is_state_valid; perform_soft_drop_h; update_disp"
sar_function perform_soft_drop_h cond "var:is_state_valid_ret=0" "apply_up; lock_active_piece; clear_lines; init_piece"

sar_function perform_hard_drop cond "var:tetris_active=1" "is_state_valid; perform_hard_drop_loop; apply_up; lock_active_piece; clear_lines; init_piece; update_disp"
sar_function perform_hard_drop_loop cond "var:is_state_valid_ret=1" "apply_down; is_state_valid; perform_hard_drop_loop"

sar_function perform_cw cond "var:tetris_active=1" "svar_set kick_r $active_piece_r; svar_set prev_piece_x $active_piece_x; svar_set prev_piece_y $active_piece_y; svar_set kick_idx 0; apply_cw; svar_set is_state_valid_ret 0; kick_cw_loop; perform_cw_h; update_disp"
sar_function perform_cw_h cond "var:is_state_valid_ret=0" "apply_ccw; svar_set active_piece_x $prev_piece_x; svar_set active_piece_y $prev_piece_y"
sar_function kick_cw_loop cond "!var:kick_idx=5 & var:is_state_valid_ret=0" "kick_cw_compute_x; kick_cw_compute_y; is_state_valid; svar_add kick_idx 1; kick_cw_loop"
sar_function kick_cw_compute_x "svar_set active_piece_x $prev_piece_x; get_kick_coord $kick_r $kick_idx x; kick_cw_compute_x_h"
sar_function kick_cw_compute_x_h "svar_add active_piece_x $get_kick_coord_ret"
sar_function kick_cw_compute_y "svar_set active_piece_y $prev_piece_y; get_kick_coord $kick_r $kick_idx y; kick_cw_compute_y_h"
sar_function kick_cw_compute_y_h "svar_add active_piece_y $get_kick_coord_ret"

sar_function perform_ccw cond "var:tetris_active=1" "svar_set prev_piece_x $active_piece_x; svar_set prev_piece_y $active_piece_y; svar_set kick_idx 0; apply_ccw; perform_ccw_h1; svar_set is_state_valid_ret 0; kick_ccw_loop; perform_ccw_h2; update_disp"
sar_function perform_ccw_h1 "svar_set kick_r $active_piece_r"
sar_function perform_ccw_h2 cond "var:is_state_valid_ret=0" "apply_cw; svar_set active_piece_x $prev_piece_x; svar_set active_piece_y $prev_piece_y"
sar_function kick_ccw_loop cond "!var:kick_idx=5 & var:is_state_valid_ret=0" "kick_ccw_compute_x; kick_ccw_compute_y; is_state_valid; svar_add kick_idx 1; kick_ccw_loop"
sar_function kick_ccw_compute_x "svar_set active_piece_x $prev_piece_x; get_kick_coord $kick_r $kick_idx x; kick_ccw_compute_x_h"
sar_function kick_ccw_compute_x_h "svar_sub active_piece_x $get_kick_coord_ret"
sar_function kick_ccw_compute_y "svar_set active_piece_y $prev_piece_y; get_kick_coord $kick_r $kick_idx y; kick_ccw_compute_y_h"
sar_function kick_ccw_compute_y_h "svar_sub active_piece_y $get_kick_coord_ret"

sar_function perform_hold cond "var:has_held=0 & var:tetris_active=1" "apply_hold; update_hold_and_disp"

sar_alias perform_reset cond "var:tetris_active=1" "refill_bag; init_piece; init_hold; init_matrix; svar_set gravity_loop_timer 0; update_hold_and_disp"
sar_alias perform_hide cond "var:tetris_active=1" "exec tetris/restore; svar_set tetris_active 0; hide_disp"
sar_alias perform_show cond "var:tetris_active=0" "exec tetris/capture; svar_set tetris_active 1; svar_set gravity_loop_timer 0; exec tetris/display; show_disp"

// ------------------------------------------------------------------------------------------
//                                          MAIN
// ------------------------------------------------------------------------------------------

// Gravity loop
sar_function gravity_loop seq gravity_loop_h1 gravity_loop
sar_function gravity_loop_h1 "svar_add gravity_loop_timer 1; svar_mod gravity_loop_timer tetris_gravity_timer_duration; gravity_loop_h2"
sar_function gravity_loop_h2 cond "var:gravity_loop_timer=0 & var:tetris_gravity=1" perform_soft_drop
svar_set gravity_loop_timer 0
gravity_loop

// Init the game
svar_set tetris_active 1
init_piece
init_hold
init_matrix
update_hold_and_disp
